# Steps to install:
# 1) Install Git
# 2.1) Clone Project Repo and Configure Submodules
# 2.2) Install Other Dependency Packages
# 3.1) Install NGINX Config
# 3.2) Install Server Files
# 4.1) Start NGINX
# 4.2) Start API
# 4.3) Start Validator-Badge (LOCAL ONLY)
# Steps 1 and 2:
# Pull dependencies from roles, then wait on the newly created global vars.
- name: Get Dependencies
  hosts: locals
  vars:
    apt_deps: []
  roles:
  - dependencies_local
  hosts: testing
  roles:
  - deploy_local
  tasks:
  #- debug: msg="{{apt_deps}}"
  - name: Finalize Dependencies
    block:
    - name: Install Dependencies in Apt
      become: true
      ansible.builtin.apt:
        pkg: "{{ apt_deps }}"
        state: present
      async: 60 # Wait 60s...
      poll: 0
      register: apt_proc
    # Wait for async tasks.
    - name: await_apt_deps
      become: true
      ansible.builtin.async_status:
        jid: '{{ apt_proc.ansible_job_id  }}'
      register: apt_result
      until: apt_result.finished
      retries: 60
      delay: 1
    - name: Let running tasks complete
      async_status:
        jid: "{{ p.proc.ansible_job_id }}"
      loop: "{{ processes }}"
      loop_control:
        loop_var: "p"
        label: "{{ p.name }}"
      register: results
      until: results is finished
      retries: 60
      delay: 1
    # This block is ran even if an error occurs while executing the other tasks.
    always:
    - name: Cleanup finished tasks
      ansible.builtin.async_status:
        jid: "{{ p.proc.ansible_job_id }}"
        mode: "cleanup"
      loop: "{{ processes }}"
      loop_control:
        loop_var: "p"
        label: "{{ p.name }}"
      register: cleanup
      until: cleanup.erased is defined
    - name: Cleanup apt task
      become: true
      ansible.builtin.async_status:
        jid: '{{ apt_proc.ansible_job_id  }}'
        mode: "cleanup"
      register: apt_result
      until: apt_result.erased is defined
#- name: await_apt_deps
#  become: true
#  ansible.builtin.async_status:
#    jid: '{{ apt_proc.ansible_job_id  }}'
#  register: apt_result
#  until: apt_result.finished
#  retries: 60
#  delay: 1
#- name: await_dotnet
#  ansible.builtin.async_status:
#    jid: '{{ dotnet_proc.ansible_job_id  }}'
#  register: dotnet_result
#  until: dotnet_result.finished
#  retries: 60
#  delay: 1
# #- debug: msg="{{ hippo_proc  }}"
# #- debug: msg="{{ apt_proc  }}"
# #- debug: msg="{{ dotnet_proc }}"

