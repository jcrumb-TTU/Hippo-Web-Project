- debug: msg="{{hostvars}}"
  # Wait for async tasks.
- name: Wait for submodules clone to finish...
  ansible.builtin.async_status:
    jid: "{{ submodule_proc['ansible_job_id'] }}"
  register: submodule_results
  until: submodule_results is finished
  retries: 60
  delay: 1
- name: Deploy app to local repo.
  ansible.builtin.copy:
    src: "{{ local_repo }}"
    dest: "~/Hippo-Web-Project-Deployment"
  register: local_deploy
- debug: msg="{{ local_deploy }}"
- name: Finalize Dependencies
  block:
  - name: await_apt_deps
    become: true
    ansible.builtin.async_status:
      jid: '{{ apt_proc.ansible_job_id  }}'
    register: apt_result
    until: apt_result.finished
    retries: 60
    delay: 1
  - name: Let running tasks complete
    async_status:
      jid: "{{ p.proc.ansible_job_id }}"
    loop: "{{ processes }}"
    loop_control:
      loop_var: "p"
      label: "{{ p.name }}"
    register: results
    until: results is finished
    retries: 60
    delay: 1
  # This block is ran even if an error occurs while executing the other tasks.
  always:
  - name: Cleanup finished tasks
    ansible.builtin.async_status:
      jid: "{{ p.proc.ansible_job_id }}"
      mode: "cleanup"
    loop: "{{ processes }}"
    loop_control:
      loop_var: "p"
      label: "{{ p.name }}"
    register: cleanup
    until: cleanup.erased is defined
  - name: Cleanup apt task
    become: true
    ansible.builtin.async_status:
      jid: '{{ apt_proc.ansible_job_id  }}'
      mode: "cleanup"
    register: apt_result
    until: apt_result.erased is defined

